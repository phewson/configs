##+AUTHOR: Paul Hewson
#+TITLE: WiFi SPARK data notes
#+EMAIL: phewson@wifispark.com
#+TAGS: fundamentals(f)  proprietary(p) splunk(s)

* Exercism

cmake -G "Unix Makefiles" ..



* Vagrant/Virtual Box

.vagrant.d/insecure_private_key

** Shiny server
Shiny server sudo su - \
~-c "R -e \"install.packages('shiny', repos='https://cran.rstudio.com/')\""~
  and / or
~sudo su - -c "R -e \"install.packages('rmarkdown')\""~
This and a few other packages need adding to the ansible playbook
~sudo apt-get install gdebi-core~
~wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.12.933-amd64.deb~
~sudo gdebi shiny-server-1.5.12.933-amd64.deb~

** Train running information
API Auth Credentials

/json/search/<station>/<year>/<month>/<day>
api.rtt.io/api/v1/


import requests
s = requests.Session()
s.auth = ('username', 'password', '4c7ac137bfcd0b498d7ec5a4441728442bbf07f2')
r = s.get("https://api.rtt.io/api/v1/json/search/EXD/to/NTA/2020/10/02")
tt = r.json()


tt['services'][50]['serviceUid']
tt['services'][50]['locationDetail']['origin']
tt['services'][50]['atocName']
tt['services'][50]['locationDetail']['realtimeDeparture']
tt['services'][50]['locationDetail']['destination']




* MEETING Programming wisdom

Linus Torvalds
Bad programmers worry about the code. Good programmers worry about data structures and their relationships


http://users.ece.utexas.edu/~adnan/pike.html


Premature complex optimization is a bad idea, but simple (read, cheap to code) optimization for common bottleneck patterns is a perfectly reasonable thing to do.

Rob Pike's 5 Rules of Programming

Rule 1. You can't tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is.

Rule 2. Measure. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.

Rule 3. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy. (Even if n does get big, use Rule 2 first.)

Rule 4. Fancy algorithms are buggier than simple ones, and they're much harder to implement. Use simple algorithms as well as simple data structures.

Rule 5. Data dominates. If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.

Pike's rules 1 and 2 restate Tony Hoare's famous maxim "Premature optimization is the root of all evil." Ken Thompson rephrased Pike's rules 3 and 4 as "When in doubt, use brute force.". Rules 3 and 4 are instances of the design philosophy KISS. Rule 5 was previously stated by Fred Brooks in The Mythical Man-Month. Rule 5 is often shortened to "write stupid code that uses smart objects".

STORE YOUR TIMESTAMPS IN UTC.



* Regexp

 - Emacs replace tab is literally press the tab key and return
 - Emacs *replace-regexp* ^.\{6\} with \&,

* MEETING Validating software design



The PDF https://github.com/rodgarrison/tla_note1/blob/main/doc/tla.p... will do much better.

TLA is an acronym for Temporal Logic of   Actions originally written by L. Lamport of PAXOS fame. The PDF contains numerous links to videos, books, docs, because TLA is widely supported and used.

TLA is like SPIN (http://spinroot.com/spin/whatispin.html) another well known model checker based on Promula not TLA syntax. And these tools fit into a larger universe of formal verification including, for example, COQ, Isabelle, Verdi, Dafny. The purpose of these tools (indeed they are all toolsets) is to:

- allow one to precisely state what safety and liveness properties a system should have. Sometimes we don't even know what those conditions are until we sit down and try typing it up.

- find counter examples to those safety, liveness conditions e.g. does my buffer overflow? did I deadlock? is one of my threads waiting forever? did my account balance ever go wrong? where? why?

People like these tools esp. for concurrent and distributed work where the program paths, call sequences is highly exponential and highly combinatorial and where one wants some assurance all the threads really work and get to the right post conditions and system behaviors.



* Graph example
#+BEGIN_SRC dot :file data_f.png :cmdline -Kdot -Tpng
digraph G {
    compound=true;
    subgraph cluster0 {
    graph [fontname = "Calibri:style=Regular"];
    node [fontname = "Calibri:style=Regular"];
    edge [fontname = "Calibri:style=Regular"];
    label="Data Sources";
    color="purple";
    host [shape=record, label="{host:|{cloud |testing_core| testing_portal}|sourcetype='spark_data'}"];
    }

    subgraph cluster1 {
    graph [fontname = "Calibri:style=Regular"];
    node [fontname = "Calibri:style=Regular"];
    edge [fontname = "Calibri:style=Regular"];
    label="Event Data"
    key [shape=record, label="UID: | unique_session_id"];
    type [shape=record, label="{type:|{<f1>Portal (Registration) |<f2> Stop/Start (Session)}}"];
    start [shape=record, label="{Start|{termination_clause:}|{null | Resumed}}", color=blue];
    edge [color="red"];
    type:f1 -> portal;
    edge [color="blue"];
    type:f2 -> stop;
    edge [color="blue"];
    type:f2 -> start;
    portal [shape=record,
            label="{view|{PortalView_Login_FreeSub | PortalView_NotHotspot | PortalView_Process_FreeSub}|
            {<p1>EmailValidation | <p2>NewUser | <p3>PortalView | <p4>PortalView_Login | <p5>ResetUser}}", color=red];
    stop [shape=record, label="{Stop|{termination_clause:}|
          {<t0>User-Request | <t1>Suspect-Logout | <t2>Resumed | <t3>Session-Timeout | <t4>Idle-Timeout |
           <t5>Idle-Timeout-Cron}}",
          color="red"];
    stop:t0 -> usage;
    stop:t2 -> usage;
    stop:t3 -> usage;
    stop:t4 -> usage;
    stop:t5 -> usage;
    usage [shape=record, label="input octets/gigawords  | output octets/gigawords",
           color="blue"];
    spage [shape=record, label="{page|{account_login | manage_account |a ccount_registration |welcome_back}|
           {validation_required | wifi_registration | account_success | form_data}}",color=red];
    edge [color="red"];
    portal:p3 -> spage;
    customer_info [shape=record, label="{customer|{id | name | zone_id | zone_name}}"];
    hotspot [shape=record, label="{hotspot | {latitude | longitude | location | id  | internet_address} |
             {type | zone_id | zone_name | mac | symbol | name | timezone}}"];
    hotspot_id [shape=record, label="hotspot_id"];
    customer_id [shape=record, label="customer_id"];
    }
    host -> type [ltail=cluster0,lhead=cluster1];
    usage -> customer_id;
    customer_id -> hotspot_id;
    start -> customer_id;
    spage -> customer_info;
    customer_info -> hotspot;

}
#+END_SRC
